(in-package #:cc-bmir)

(defclass fixnump (bir:conditional-test) ())
(defclass consp (bir:conditional-test) ())
(defclass characterp (bir:conditional-test) ())
(defclass single-float-p (bir:conditional-test) ())
(defclass generalp (bir:conditional-test) ())
(defclass headerq (bir:conditional-test)
  ((%info :initarg :info :reader info)))

;;;

(defclass memref2 (bir:one-input bir:one-output bir:instruction)
  ((%offset :initarg :offset :reader offset :type integer)))

(defclass load (cc-bir:atomic bir:one-input bir:one-output bir:instruction)
  ())

(defclass store (cc-bir:atomic bir:no-output bir:instruction)
  ())

(defclass cas (cc-bir:atomic bir:one-output bir:instruction)
  ())

;;;

;;; Instruction for parsing arguments for local calls. It outputs a number
;;; of fixed values based on the lambda list of the function; with Clasp's
;;; current convention for local functions, that's nreq + 2*nopt, plus one if
;;; there is a rest parameter that is used.
;;; A basic idea here is to allow the parsing to be moved independently of the
;;; call, so e.g. it could be moved up to where values are produced, thus
;;; removing any need to save values.
;;; Also, this takes any number of inputs and those inputs can have any rtype.
;;; This lets local calls and mv local calls share this instruction.
(defclass local-call-arguments (bir:one-output bir:instruction)
  ((%callee :initarg :callee :reader bir:callee :type bir:function)))

;;; Lowered version of a local call. Two inputs, the callee and the output of
;;; a local-call-arguments instruction.
(defclass local-call (bir:one-output bir:instruction) ())

;;;

;;; Convert a set of T_O* to a T_mv, or a T_mv to the primary T_O*.
;;; Generated by values coercion. ftm is distinct from bir:fixed-to-multiple,
;;; which is important to program semantics as it represents cl:values calls,
;;; whereas these are more of a low level detail.
(defclass ftm (bir:one-input bir:one-output bir:instruction) ())
(defclass mtf (bir:one-input bir:one-output bir:instruction) ())

;;; Convert between fixed number of values rtypes.
;;; E.g. it can receive (:object :object) and output (:object), or vice versa.
;;; When shrinking this performs no actual operation. When adding all it does is
;;; load the NIL constant.
(defclass fixed-values-pad (bir:one-input bir:one-output bir:instruction) ())

;;;

(defclass datum (bir:datum)
  ((%rtype :initarg :rtype :accessor rtype)))

(defclass output (datum bir:output) ())
(defclass phi (datum bir:phi) ())

(defmethod rtype ((datum bir:variable)) '(:object))
(defmethod rtype ((datum bir:argument)) '(:object))
(defmethod rtype ((datum bir:load-time-value)) '(:object))
(defmethod rtype ((datum bir:constant)) '(:object))
